//#include "stdafx.h"
#include "opencv2/opencv.hpp"
#include <iostream>
#include <stdio.h>
using namespace std;
using namespace cv;
void imadjust(const Mat1b& src, Mat1b& dst, int tol = 1, Vec2i in = Vec2i(0, 255), Vec2i out = Vec2i(0, 255))
{
	// src : input CV_8UC1 image
	// dst : output CV_8UC1 imge
	// tol : tolerance, from 0 to 100.
	// in  : src image bounds
	// out : dst image buonds

	dst = src.clone();

	tol = max(0, min(100, tol));

	if (tol > 0)
	{
		// Compute in and out limits

		// Histogram
		vector<int> hist(256, 0);
		for (int r = 0; r < src.rows; ++r) {
			for (int c = 0; c < src.cols; ++c) {
				hist[src(r, c)]++;
			}
		}

		// Cumulative histogram
		vector<int> cum = hist;
		for (int i = 1; i < hist.size(); ++i) {
			cum[i] = cum[i - 1] + hist[i];
		}

		// Compute bounds
		int total = src.rows * src.cols;
		int low_bound = total * tol / 100;
		int upp_bound = total * (100 - tol) / 100;
		in[0] = distance(cum.begin(), lower_bound(cum.begin(), cum.end(), low_bound));
		in[1] = distance(cum.begin(), lower_bound(cum.begin(), cum.end(), upp_bound));

	}

	// Stretching
	float scale = float(out[1] - out[0]) / float(in[1] - in[0]);
	for (int r = 0; r < dst.rows; ++r)
	{
		for (int c = 0; c < dst.cols; ++c)
		{
			int vs = max(src(r, c) - in[0], 0);
			int vd = min(int(vs * scale + 0.5f) + out[0], out[1]);
			dst(r, c) = saturate_cast<uchar>(vd);
		}
	}
}
int main()
{
	
	//Chinh do sang
	//vector<Mat> hsv_channel(3);
	//Mat img;
	//cvtColor(image, img, COLOR_BGR2HSV);
	//Mat1b h, s, v;
	//split(img, hsv_channel);
	//h = hsv_channel[0];
	//s = hsv_channel[1];
	//v = hsv_channel[2];

	//imadjust(h, h);
	//imadjust(s, s);
	////imadjust(v, v);
	//v = v*1.2;


	//hsv_channel[0] = h;
	//hsv_channel[1] = s;
	//hsv_channel[2] = v;
	//merge(hsv_channel, img);
	//cvtColor(img, img, COLOR_HSV2BGR);
	////GaussianBlur(img, img, Size(7, 7), 0);
	//imshow("Image adjust", img);

	//load file cascade dã train
	cv::CascadeClassifier cascade;
	//cascade.load("D:/OpenCV/opencv/sources/data/haarcascades/haarcascade_licence_plate_rus_16stages.xml");
	//cascade.load("GreenParking_cascade.xml"); //xe may
	cascade.load("in.xml"); //xe hoi
	//load ?nh và chuy?n thành ?nh xám
	Mat image = imread("sample2.jpg", IMREAD_COLOR);
	cv::Mat matGray = cv::imread("sample2.jpg", cv::IMREAD_GRAYSCALE);

	vector<Mat> hsv_channel(3);
	Mat img;
	cvtColor(image, img, COLOR_BGR2HSV);
	Mat1b h, s, v;
	split(img, hsv_channel);
	h = hsv_channel[0];
	s = hsv_channel[1];
	v = hsv_channel[2];

	//imadjust(h, h);
	//imadjust(s, s);
	//imadjust(v, v);
    v = v*1.5;


	hsv_channel[0] = h;
	hsv_channel[1] = s;
	hsv_channel[2] = v;
	merge(hsv_channel, img);
	cvtColor(img, image, COLOR_HSV2BGR);
	cvtColor(image, matGray, COLOR_BGR2GRAY);
	//GaussianBlur(img, img, Size(7, 7), 0);

	//detect
	std::vector<cv::Rect> rects;
	cascade.detectMultiScale(matGray, rects, 1.1, 3, CV_HAAR_SCALE_IMAGE, Size(200,150));

	//in ra s? lu?ng d?i tu?ng phát hi?n du?c
	std::cout << "Detected " << rects.size() << " objects";
	//face_cascade.load("D:/OpenCV/opencv/sources/data/haarcascades/haarcascade_frontalface_alt_tree.xml");
	// Detect faces

	//flag 0| CV_HAAR_SCALE_IMAGE can be removed
	// Draw circles on the detected faces
	for (int i = 0; i < rects.size(); i++)
	{
		if ((rects[i].width / rects[i].height >= 1) && (rects[i].width / rects[i].height <= 5.5))
		{
			Point point1(rects[i].x, rects[i].y);
			Point point2(rects[i].x + rects[i].width, rects[i].y + rects[i].height);
			rectangle(image, point1, point2, Scalar(255, 0, 255), 4, 8, 0);
			//rectangle(image, point1,point2)
		}
		

		
	}
	namedWindow("Detected Face", 1);
	imshow("Detected Face", image);
	waitKey(0);
	return 0;
}

